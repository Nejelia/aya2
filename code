///*Задание 1 Создайте класс, представляющий учебный класс ClassRoom.
//Создайте класс ученик - Pupil. 
//В теле класса создайте методы void Study(), void Read(), void Write(), void Relax().
//Создайте 3 производных класса ExcelentPupil, GoodPupil, BadPupil от класса базового класса Pupil и переопределите каждый из методов,
//в зависимости от успеваемости ученика (реализация может быть произвольной, например простой вывод на консоль разных строк).
//Конструктор класса ClassRoom принимает аргументы типа Pupil, класс должен состоять из 4 учеников.
//Предусмотрите возможность того, что пользователь может передать 2 или 3 аргумента.
//Выведите информацию о том, как все ученики экземпляра класса ClassRoom умеют учиться, читать, писать, отдыхать. 

//Примечание: при реализации возможности создания экземпляра класса ClassRoom с произвольным количеством учеников воспользуйтесь ключевым словом params.*/

//using System;

//// Базовый класс ученика
//class Pupil
//{
//    public virtual void Study()
//    {
//        Console.WriteLine("Ученик учится");
//    }

//    public virtual void Read()
//    {
//        Console.WriteLine("Ученик читает");
//    }

//    public virtual void Write()
//    {
//        Console.WriteLine("Ученик пишет");
//    }

//    public virtual void Relax()
//    {
//        Console.WriteLine("Ученик отдыхает");
//    }
//}

//// Производный класс для отличников
//class ExcellentPupil : Pupil
//{
//    public override void Study()
//    {
//        Console.WriteLine("Отличник учится отлично");
//    }

//    public override void Read()
//    {
//        Console.WriteLine("Отличник читает много книг");
//    }

//    public override void Write()
//    {
//        Console.WriteLine("Отличник аккуратно пишет сочинения");
//    }

//    public override void Relax()
//    {
//        Console.WriteLine("Отличник расслабляется разнообразно");
//    }
//}

//// Производный класс для хороших учеников
//class GoodPupil : Pupil
//{
//    public override void Study()
//    {
//        Console.WriteLine("Хороший ученик учится хорошо");
//    }

//    public override void Read()
//    {
//        Console.WriteLine("Хороший ученик любит читать книги");
//    }

//    public override void Write()
//    {
//        Console.WriteLine("Хороший ученик аккуратно пишет");
//    }

//    public override void Relax()
//    {
//        Console.WriteLine("Хороший ученик расслабляется умеренно");
//    }
//}

//// Производный класс для плохих учеников
//class BadPupil : Pupil
//{
//    public override void Study()
//    {
//        Console.WriteLine("Плохой ученик плохо учится");
//    }

//    public override void Read()
//    {
//        Console.WriteLine("Плохой ученик не любит читать");
//    }

//    public override void Write()
//    {
//        Console.WriteLine("Плохой ученик не очень умеет писать");
//    }

//    public override void Relax()
//    {
//        Console.WriteLine("Плохой ученик расслабляется много");
//    }
//}

//// Класс представляющий учебный класс
//class ClassRoom
//{
//    // Массив учеников
//    private Pupil[] pupils;

//    // Конструктор класса
//    public ClassRoom(params Pupil[] pupils)
//    {
//        // Если передано менее 4 учеников, создаем массив из 4 элементов и заполняем переданными учениками
//        this.pupils = new Pupil[4];

//        for (int i = 0; i < Math.Min(pupils.Length, 4); i++)
//        {
//            this.pupils[i] = pupils[i];
//        }

//        // Если передано менее 4 учеников, создаем соответствующее количество дополнительных учеников
//        for (int i = pupils.Length; i < 4; i++)
//        {
//            this.pupils[i] = new Pupil();
//        }
//    }

//    // Метод для вывода информации о том, как все ученики умеют учиться, читать, писать, отдыхать
//    public void ShowClassInfo()
//    {
//        Console.WriteLine("Информация о классе:");

//        for (int i = 0; i < 4; i++)
//        {
//            Console.WriteLine($"Ученик {i + 1}:");
//            this.pupils[i].Study();
//            this.pupils[i].Read();
//            this.pupils[i].Write();
//            this.pupils[i].Relax();
//            Console.WriteLine();
//        }
//    }
//}

//class Program
//{
//    static void Main()
//    {
//        // Создаем экземпляр класса ClassRoom с разными типами учеников
//        ClassRoom classroom = new ClassRoom(new ExcellentPupil(), new GoodPupil(), new BadPupil());

//        // Выводим информацию о классе
//        classroom.ShowClassInfo();

//        Console.ReadLine(); // Чтобы консольное окно не закрылось сразу
//    }
//}

///*Задание 2 Создайте класс vehicle.
//В теле класса создайте поля: координаты и параметры средств передвижения (цена, скорость, год выпуска).
//Создайте 3 производных класса Plane, Саг и Ship.
//Для класса Plane должна быть определена высота и количество пассажиров.
//Для класса Ship — количество пассажиров и порт приписки.
//Написать программу, которая выводит на экран информацию о каждом средстве передвижения.

//Примечание: избегайте дублирования кода, используйте ключевое слово base после объявления конструкторов
//в классах наследниках для вызова и передачи параметров в конструктор базового класса.*/

//using System;

//// Базовый класс для транспортных средств
//class Vehicle
//{
//    // Поля координат и параметров средства передвижения
//    private double coordinates;
//    private double price;
//    private double speed;
//    private int year;

//    // Конструктор базового класса
//    public Vehicle(double coordinates, double price, double speed, int year)
//    {
//        this.coordinates = coordinates;
//        this.price = price;
//        this.speed = speed;
//        this.year = year;
//    }

//    // Метод для вывода информации о транспортном средстве
//    public virtual void DisplayInfo()
//    {
//        Console.WriteLine($"Координаты: {coordinates}");
//        Console.WriteLine($"Цена: {price}");
//        Console.WriteLine($"Скорость: {speed}");
//        Console.WriteLine($"Год выпуска: {year}");
//    }
//}

//// Производный класс для самолета
//class Plane : Vehicle
//{
//    // Дополнительные поля для самолета
//    private double height;
//    private int passengers;

//    // Конструктор класса Plane, использует ключевое слово base для вызова конструктора базового класса
//    public Plane(double coordinates, double price, double speed, int year, double height, int passengers)
//        : base(coordinates, price, speed, year)
//    {
//        this.height = height;
//        this.passengers = passengers;
//    }

//    // Переопределенный метод для вывода информации о самолете
//    public override void DisplayInfo()
//    {
//        base.DisplayInfo(); // Вызов метода базового класса

//        // Дополнительная информация для самолета
//        Console.WriteLine($"Высота: {height}");
//        Console.WriteLine($"Количество пассажиров: {passengers}");
//    }
//}

//// Производный класс для автомобиля
//class Car : Vehicle
//{
//    // Конструктор класса Car, использует ключевое слово base для вызова конструктора базового класса
//    public Car(double coordinates, double price, double speed, int year)
//        : base(coordinates, price, speed, year)
//    {
//    }
//}

//// Производный класс для корабля
//class Ship : Vehicle
//{
//    // Дополнительные поля для корабля
//    private int passengers;
//    private string port;

//    // Конструктор класса Ship, использует ключевое слово base для вызова конструктора базового класса
//    public Ship(double coordinates, double price, double speed, int year, int passengers, string port)
//        : base(coordinates, price, speed, year)
//    {
//        this.passengers = passengers;
//        this.port = port;
//    }

//    // Переопределенный метод для вывода информации о корабле
//    public override void DisplayInfo()
//    {
//        base.DisplayInfo(); // Вызов метода базового класса

//        // Дополнительная информация для корабля
//        Console.WriteLine($"Количество пассажиров: {passengers}");
//        Console.WriteLine($"Порт приписки: {port}");
//    }
//}

//class Program
//{
//    static void Main()
//    {
//        // Создаем объекты разных типов транспортных средств
//        Vehicle vehicle1 = new Plane(0, 1000000, 900, 2020, 12000, 150);
//        Vehicle vehicle2 = new Car(50, 30000, 120, 2018);
//        Vehicle vehicle3 = new Ship(30, 500000, 50, 2015, 200, "Гавана");

//        // Выводим информацию о каждом средстве передвижения
//        Console.WriteLine("Информация о транспортных средствах:");

//        Console.WriteLine("\nСамолет:");
//        vehicle1.DisplayInfo();

//        Console.WriteLine("\nАвтомобиль:");
//        vehicle2.DisplayInfo();

//        Console.WriteLine("\nКорабль:");
//        vehicle3.DisplayInfo();

//        Console.ReadLine(); // Чтобы консольное окно не закрылось сразу
//    }
//}

/*Задание 3 Создайте класс DocumentWorker.
В теле класса создайте три метода OpenDocument(), EditDocument(), SaveDocument().
В тело каждого из методов добавьте вывод на экран соответствующих строк: "Документ открыт",
"Редактирование документа доступно в версии Pro", "Сохранение документа доступно в версии Pro".
Создайте производный класс ProDocumentWorker.
Переопределите соответствующие методы, при переопределении методов выводите следующие строки:
"Документ отредактирован", "Документ сохранен в старом формате, сохранение в остальных форматах доступно в версии Expert".
Создайте производный класс ExpertDocumentWorker от базового класса ProDocumentWorker.
Переопределите соответствующий метод. При вызове данного метода необходимо выводить на экран
"Документ сохранен в новом формате".
В теле метода Main() реализуйте возможность приема от пользователя номера ключа доступа pro и exp.
Если пользователь не вводит ключ, он может пользоваться только бесплатной версией
(создается экземпляр базового класса), если пользователь ввел номера ключа доступа pro и exp, то должен создаться экземпляр соответствующей
версии класса, приведенный к базовому – DocumentWorker.*/

using System;

// Базовый класс DocumentWorker
class DocumentWorker
{
    // Метод для открытия документа
    public virtual void OpenDocument()
    {
        Console.WriteLine("Документ открыт");
    }

    // Метод для редактирования документа
    public virtual void EditDocument()
    {
        Console.WriteLine("Редактирование документа доступно в версии Pro");
    }

    // Метод для сохранения документа
    public virtual void SaveDocument()
    {
        Console.WriteLine("Сохранение документа доступно в версии Pro");
    }
}

// Производный класс ProDocumentWorker
class ProDocumentWorker : DocumentWorker
{
    // Переопределение метода для редактирования документа
    public override void EditDocument()
    {
        Console.WriteLine("Документ отредактирован");
    }

    // Переопределение метода для сохранения документа
    public override void SaveDocument()
    {
        Console.WriteLine("Документ сохранен в старом формате, сохранение в остальных форматах доступно в версии Expert");
    }
}

// Производный класс ExpertDocumentWorker от ProDocumentWorker
class ExpertDocumentWorker : ProDocumentWorker
{
    // Переопределение метода для сохранения документа
    public override void SaveDocument()
    {
        Console.WriteLine("Документ сохранен в новом формате");
    }
}

class Program
{
    static void Main()
    {
        // Пользователь вводит ключ доступа
        Console.Write("Введите ключ доступа (pro/exp): ");
        string key = Console.ReadLine();

        // Создаем экземпляр базового класса DocumentWorker
        DocumentWorker documentWorker;

        // В зависимости от введенного ключа создаем соответствующий экземпляр класса
        switch (key.ToLower())
        {
            case "pro":
                documentWorker = new ProDocumentWorker();
                break;
            case "exp":
                documentWorker = new ExpertDocumentWorker();
                break;
            default:
                documentWorker = new DocumentWorker();
                break;
        }

        // Выполняем действия с документом
        documentWorker.OpenDocument();
        documentWorker.EditDocument();
        documentWorker.SaveDocument();

        Console.ReadLine(); // Чтобы консольное окно не закрылось сразу
    }
}


